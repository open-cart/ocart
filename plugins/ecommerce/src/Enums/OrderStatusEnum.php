<?php
namespace Ocart\Ecommerce\Enums;

use Ocart\Core\Library\Enum;
use Html;

class OrderStatusEnum extends Enum
{

    public const PENDING = 'pending';
    public const PROCESSING = 'processing';
    public const DELIVERING = 'delivering';
    public const DELIVERED = 'delivered';
    public const COMPLETED = 'completed';
    public const CANCELED = 'canceled';

    protected function init($value)
    {
        if (!$value) {
            $value = self::PENDING;
        }

        parent::init($value); // TODO: Change the autogenerated stub
    }

    public function toHtml()
    {
        switch ($this->value) {
            case self::COMPLETED:
                return Html::tag('span', $this->getLabel($this->value), [
                    'class' => 'inline-flex items-center justify-center px-2 py-1 mr-2 text-xs font-bold leading-none
                     text-white bg-green-600 rounded dark:text-gray-300',
                ]);
            case self::PROCESSING:
                return Html::tag('span', $this->getLabel($this->value), [
                    'class' => 'inline-flex items-center justify-center px-2 py-1 mr-2 text-xs font-bold leading-none
                     text-white bg-blue-500 rounded dark:text-gray-300',
                ]);
            case self::PENDING:
                return Html::tag('span', $this->getLabel($this->value), [
                    'class' => 'inline-flex items-center justify-center px-2 py-1 mr-2 text-xs font-bold leading-none
                     text-white bg-yellow-400 rounded dark:text-gray-300',
                ]);
            case self::CANCELED:
                return Html::tag('span', $this->getLabel($this->value), [
                    'class' => 'inline-flex items-center justify-center px-2 py-1 mr-2 text-xs font-bold leading-none
                     text-white bg-red-400 rounded dark:text-gray-300',
                ]);
            default:
                break;
        }

        return "<label>{$this->value}</label>";
    }

    static function getLabel($value) {
        return trans('plugins/ecommerce::ecommerce.statuses.'.$value);
    }
}